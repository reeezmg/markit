/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Expense } from "../../prisma/generated";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateExpense(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Expense | undefined), DefaultError, Prisma.ExpenseCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Expense | undefined), DefaultError, Prisma.ExpenseCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseCreateArgs, DefaultError, Expense, true>('Expense', 'POST', `${endpoint}/expense/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyExpense(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Expense', 'POST', `${endpoint}/expense/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyExpense<TArgs extends Prisma.ExpenseFindManyArgs, TQueryFnData = Array<Prisma.ExpenseGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Expense', `${endpoint}/expense/findMany`, args, options, fetch);
}

export function useInfiniteFindManyExpense<TArgs extends Prisma.ExpenseFindManyArgs, TQueryFnData = Array<Prisma.ExpenseGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Expense', `${endpoint}/expense/findMany`, args, options, fetch);
}

export function useFindUniqueExpense<TArgs extends Prisma.ExpenseFindUniqueArgs, TQueryFnData = Prisma.ExpenseGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Expense', `${endpoint}/expense/findUnique`, args, options, fetch);
}

export function useFindFirstExpense<TArgs extends Prisma.ExpenseFindFirstArgs, TQueryFnData = Prisma.ExpenseGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Expense', `${endpoint}/expense/findFirst`, args, options, fetch);
}

export function useUpdateExpense(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Expense | undefined), DefaultError, Prisma.ExpenseUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Expense | undefined), DefaultError, Prisma.ExpenseUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseUpdateArgs, DefaultError, Expense, true>('Expense', 'PUT', `${endpoint}/expense/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyExpense(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Expense', 'PUT', `${endpoint}/expense/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertExpense(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Expense | undefined), DefaultError, Prisma.ExpenseUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Expense | undefined), DefaultError, Prisma.ExpenseUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseUpsertArgs, DefaultError, Expense, true>('Expense', 'POST', `${endpoint}/expense/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteExpense(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Expense | undefined), DefaultError, Prisma.ExpenseDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Expense | undefined), DefaultError, Prisma.ExpenseDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseDeleteArgs, DefaultError, Expense, true>('Expense', 'DELETE', `${endpoint}/expense/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Expense, Prisma.ExpenseGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyExpense(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Expense', 'DELETE', `${endpoint}/expense/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateExpense<TArgs extends Prisma.ExpenseAggregateArgs, TQueryFnData = Prisma.GetExpenseAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Expense', `${endpoint}/expense/aggregate`, args, options, fetch);
}

export function useGroupByExpense<TArgs extends Prisma.ExpenseGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ExpenseGroupByArgs['orderBy'] } : { orderBy?: Prisma.ExpenseGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ExpenseGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ExpenseGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ExpenseGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ExpenseGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ExpenseGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ExpenseGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Expense', `${endpoint}/expense/groupBy`, args, options, fetch);
}

export function useCountExpense<TArgs extends Prisma.ExpenseCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ExpenseCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Expense', `${endpoint}/expense/count`, args, options, fetch);
}
import type { PaymentMode } from '../../prisma/generated';

export function useCheckExpense<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; note?: string; currency?: string; paymentMode?: PaymentMode; status?: string; receipt?: string; receiptName?: string; expensecategoryId?: string; companyId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Expense', `${endpoint}/expense/check`, args, options, fetch);
}
