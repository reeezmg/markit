/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Entry } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateEntry(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Entry | undefined), DefaultError, Prisma.EntryCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Entry | undefined), DefaultError, Prisma.EntryCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EntryCreateArgs, DefaultError, Entry, true>('Entry', 'POST', `${endpoint}/entry/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EntryCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.EntryCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EntryCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EntryCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyEntry(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EntryCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EntryCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EntryCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Entry', 'POST', `${endpoint}/entry/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EntryCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EntryCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EntryCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EntryCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyEntry<TArgs extends Prisma.EntryFindManyArgs, TQueryFnData = Array<Prisma.EntryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EntryFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EntryFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Entry', `${endpoint}/entry/findMany`, args, options, fetch);
}

export function useInfiniteFindManyEntry<TArgs extends Prisma.EntryFindManyArgs, TQueryFnData = Array<Prisma.EntryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EntryFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EntryFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Entry', `${endpoint}/entry/findMany`, args, options, fetch);
}

export function useFindUniqueEntry<TArgs extends Prisma.EntryFindUniqueArgs, TQueryFnData = Prisma.EntryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EntryFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EntryFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Entry', `${endpoint}/entry/findUnique`, args, options, fetch);
}

export function useFindFirstEntry<TArgs extends Prisma.EntryFindFirstArgs, TQueryFnData = Prisma.EntryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EntryFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EntryFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Entry', `${endpoint}/entry/findFirst`, args, options, fetch);
}

export function useUpdateEntry(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Entry | undefined), DefaultError, Prisma.EntryUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Entry | undefined), DefaultError, Prisma.EntryUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EntryUpdateArgs, DefaultError, Entry, true>('Entry', 'PUT', `${endpoint}/entry/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EntryUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.EntryUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EntryUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EntryUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyEntry(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EntryUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EntryUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EntryUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Entry', 'PUT', `${endpoint}/entry/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EntryUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EntryUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EntryUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EntryUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertEntry(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Entry | undefined), DefaultError, Prisma.EntryUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Entry | undefined), DefaultError, Prisma.EntryUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EntryUpsertArgs, DefaultError, Entry, true>('Entry', 'POST', `${endpoint}/entry/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EntryUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.EntryUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EntryUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EntryUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteEntry(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Entry | undefined), DefaultError, Prisma.EntryDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Entry | undefined), DefaultError, Prisma.EntryDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EntryDeleteArgs, DefaultError, Entry, true>('Entry', 'DELETE', `${endpoint}/entry/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EntryDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.EntryDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EntryDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EntryDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Entry, Prisma.EntryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyEntry(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EntryDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EntryDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EntryDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Entry', 'DELETE', `${endpoint}/entry/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EntryDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EntryDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EntryDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EntryDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateEntry<TArgs extends Prisma.EntryAggregateArgs, TQueryFnData = Prisma.GetEntryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EntryAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EntryAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Entry', `${endpoint}/entry/aggregate`, args, options, fetch);
}

export function useGroupByEntry<TArgs extends Prisma.EntryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.EntryGroupByArgs['orderBy'] } : { orderBy?: Prisma.EntryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.EntryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.EntryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.EntryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.EntryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.EntryGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.EntryGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Entry', `${endpoint}/entry/groupBy`, args, options, fetch);
}

export function useCountEntry<TArgs extends Prisma.EntryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.EntryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EntryCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EntryCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Entry', `${endpoint}/entry/count`, args, options, fetch);
}

export function useCheckEntry<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; barcode?: string; variantId?: string; outOfStock?: boolean; categoryId?: string; billId?: string; sizeId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Entry', `${endpoint}/entry/check`, args, options, fetch);
}
