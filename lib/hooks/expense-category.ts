/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ExpenseCategory } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateExpenseCategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ExpenseCategory | undefined), DefaultError, Prisma.ExpenseCategoryCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(ExpenseCategory | undefined), DefaultError, Prisma.ExpenseCategoryCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseCategoryCreateArgs, DefaultError, ExpenseCategory, true>('ExpenseCategory', 'POST', `${endpoint}/expenseCategory/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseCategoryCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseCategoryCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyExpenseCategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseCategoryCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseCategoryCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseCategoryCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ExpenseCategory', 'POST', `${endpoint}/expenseCategory/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseCategoryCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseCategoryCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyExpenseCategory<TArgs extends Prisma.ExpenseCategoryFindManyArgs, TQueryFnData = Array<Prisma.ExpenseCategoryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ExpenseCategory', `${endpoint}/expenseCategory/findMany`, args, options, fetch);
}

export function useInfiniteFindManyExpenseCategory<TArgs extends Prisma.ExpenseCategoryFindManyArgs, TQueryFnData = Array<Prisma.ExpenseCategoryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ExpenseCategory', `${endpoint}/expenseCategory/findMany`, args, options, fetch);
}

export function useFindUniqueExpenseCategory<TArgs extends Prisma.ExpenseCategoryFindUniqueArgs, TQueryFnData = Prisma.ExpenseCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ExpenseCategory', `${endpoint}/expenseCategory/findUnique`, args, options, fetch);
}

export function useFindFirstExpenseCategory<TArgs extends Prisma.ExpenseCategoryFindFirstArgs, TQueryFnData = Prisma.ExpenseCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ExpenseCategory', `${endpoint}/expenseCategory/findFirst`, args, options, fetch);
}

export function useUpdateExpenseCategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ExpenseCategory | undefined), DefaultError, Prisma.ExpenseCategoryUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(ExpenseCategory | undefined), DefaultError, Prisma.ExpenseCategoryUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseCategoryUpdateArgs, DefaultError, ExpenseCategory, true>('ExpenseCategory', 'PUT', `${endpoint}/expenseCategory/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseCategoryUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseCategoryUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyExpenseCategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseCategoryUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseCategoryUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseCategoryUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ExpenseCategory', 'PUT', `${endpoint}/expenseCategory/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseCategoryUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseCategoryUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertExpenseCategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ExpenseCategory | undefined), DefaultError, Prisma.ExpenseCategoryUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(ExpenseCategory | undefined), DefaultError, Prisma.ExpenseCategoryUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseCategoryUpsertArgs, DefaultError, ExpenseCategory, true>('ExpenseCategory', 'POST', `${endpoint}/expenseCategory/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseCategoryUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseCategoryUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteExpenseCategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ExpenseCategory | undefined), DefaultError, Prisma.ExpenseCategoryDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(ExpenseCategory | undefined), DefaultError, Prisma.ExpenseCategoryDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseCategoryDeleteArgs, DefaultError, ExpenseCategory, true>('ExpenseCategory', 'DELETE', `${endpoint}/expenseCategory/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseCategoryDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseCategoryDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ExpenseCategory, Prisma.ExpenseCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyExpenseCategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseCategoryDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ExpenseCategoryDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ExpenseCategoryDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ExpenseCategory', 'DELETE', `${endpoint}/expenseCategory/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ExpenseCategoryDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ExpenseCategoryDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ExpenseCategoryDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateExpenseCategory<TArgs extends Prisma.ExpenseCategoryAggregateArgs, TQueryFnData = Prisma.GetExpenseCategoryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ExpenseCategory', `${endpoint}/expenseCategory/aggregate`, args, options, fetch);
}

export function useGroupByExpenseCategory<TArgs extends Prisma.ExpenseCategoryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ExpenseCategoryGroupByArgs['orderBy'] } : { orderBy?: Prisma.ExpenseCategoryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ExpenseCategoryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ExpenseCategoryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ExpenseCategoryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ExpenseCategoryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ExpenseCategoryGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ExpenseCategoryGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ExpenseCategory', `${endpoint}/expenseCategory/groupBy`, args, options, fetch);
}

export function useCountExpenseCategory<TArgs extends Prisma.ExpenseCategoryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ExpenseCategoryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ExpenseCategoryCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ExpenseCategory', `${endpoint}/expenseCategory/count`, args, options, fetch);
}

export function useCheckExpenseCategory<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; status?: boolean; companyId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ExpenseCategory', `${endpoint}/expenseCategory/check`, args, options, fetch);
}
