/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, UserClient } from "../../prisma/generated";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateUserClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(UserClient | undefined), DefaultError, Prisma.UserClientCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(UserClient | undefined), DefaultError, Prisma.UserClientCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserClientCreateArgs, DefaultError, UserClient, true>('UserClient', 'POST', `${endpoint}/userClient/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserClientCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserClientCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserClientCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserClientCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyUserClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserClientCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserClientCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserClientCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('UserClient', 'POST', `${endpoint}/userClient/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserClientCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserClientCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserClientCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserClientCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyUserClient<TArgs extends Prisma.UserClientFindManyArgs, TQueryFnData = Array<Prisma.UserClientGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserClientFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserClientFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserClient', `${endpoint}/userClient/findMany`, args, options, fetch);
}

export function useInfiniteFindManyUserClient<TArgs extends Prisma.UserClientFindManyArgs, TQueryFnData = Array<Prisma.UserClientGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserClientFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserClientFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('UserClient', `${endpoint}/userClient/findMany`, args, options, fetch);
}

export function useFindUniqueUserClient<TArgs extends Prisma.UserClientFindUniqueArgs, TQueryFnData = Prisma.UserClientGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserClientFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserClientFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserClient', `${endpoint}/userClient/findUnique`, args, options, fetch);
}

export function useFindFirstUserClient<TArgs extends Prisma.UserClientFindFirstArgs, TQueryFnData = Prisma.UserClientGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserClientFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserClientFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserClient', `${endpoint}/userClient/findFirst`, args, options, fetch);
}

export function useUpdateUserClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(UserClient | undefined), DefaultError, Prisma.UserClientUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(UserClient | undefined), DefaultError, Prisma.UserClientUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserClientUpdateArgs, DefaultError, UserClient, true>('UserClient', 'PUT', `${endpoint}/userClient/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserClientUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserClientUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserClientUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserClientUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyUserClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserClientUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserClientUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserClientUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('UserClient', 'PUT', `${endpoint}/userClient/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserClientUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserClientUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserClientUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserClientUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertUserClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(UserClient | undefined), DefaultError, Prisma.UserClientUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(UserClient | undefined), DefaultError, Prisma.UserClientUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserClientUpsertArgs, DefaultError, UserClient, true>('UserClient', 'POST', `${endpoint}/userClient/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserClientUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserClientUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserClientUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserClientUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteUserClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(UserClient | undefined), DefaultError, Prisma.UserClientDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(UserClient | undefined), DefaultError, Prisma.UserClientDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserClientDeleteArgs, DefaultError, UserClient, true>('UserClient', 'DELETE', `${endpoint}/userClient/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserClientDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserClientDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserClientDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserClientDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserClient, Prisma.UserClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyUserClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserClientDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserClientDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserClientDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('UserClient', 'DELETE', `${endpoint}/userClient/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserClientDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserClientDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserClientDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserClientDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateUserClient<TArgs extends Prisma.UserClientAggregateArgs, TQueryFnData = Prisma.GetUserClientAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserClientAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserClientAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserClient', `${endpoint}/userClient/aggregate`, args, options, fetch);
}

export function useGroupByUserClient<TArgs extends Prisma.UserClientGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.UserClientGroupByArgs['orderBy'] } : { orderBy?: Prisma.UserClientGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.UserClientGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.UserClientGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.UserClientGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.UserClientGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.UserClientGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.UserClientGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserClient', `${endpoint}/userClient/groupBy`, args, options, fetch);
}

export function useCountUserClient<TArgs extends Prisma.UserClientCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.UserClientCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserClientCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserClientCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserClient', `${endpoint}/userClient/count`, args, options, fetch);
}

export function useCheckUserClient<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { clientId?: string; userId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('UserClient', `${endpoint}/userClient/check`, args, options, fetch);
}
