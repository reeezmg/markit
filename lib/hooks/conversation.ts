/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Conversation } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Conversation | undefined), DefaultError, Prisma.ConversationCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Conversation | undefined), DefaultError, Prisma.ConversationCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationCreateArgs, DefaultError, Conversation, true>('Conversation', 'POST', `${endpoint}/conversation/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Conversation', 'POST', `${endpoint}/conversation/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyConversation<TArgs extends Prisma.ConversationFindManyArgs, TQueryFnData = Array<Prisma.ConversationGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ConversationFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ConversationFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Conversation', `${endpoint}/conversation/findMany`, args, options, fetch);
}

export function useInfiniteFindManyConversation<TArgs extends Prisma.ConversationFindManyArgs, TQueryFnData = Array<Prisma.ConversationGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ConversationFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ConversationFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Conversation', `${endpoint}/conversation/findMany`, args, options, fetch);
}

export function useFindUniqueConversation<TArgs extends Prisma.ConversationFindUniqueArgs, TQueryFnData = Prisma.ConversationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ConversationFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ConversationFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Conversation', `${endpoint}/conversation/findUnique`, args, options, fetch);
}

export function useFindFirstConversation<TArgs extends Prisma.ConversationFindFirstArgs, TQueryFnData = Prisma.ConversationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ConversationFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ConversationFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Conversation', `${endpoint}/conversation/findFirst`, args, options, fetch);
}

export function useUpdateConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Conversation | undefined), DefaultError, Prisma.ConversationUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Conversation | undefined), DefaultError, Prisma.ConversationUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationUpdateArgs, DefaultError, Conversation, true>('Conversation', 'PUT', `${endpoint}/conversation/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Conversation', 'PUT', `${endpoint}/conversation/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Conversation | undefined), DefaultError, Prisma.ConversationUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Conversation | undefined), DefaultError, Prisma.ConversationUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationUpsertArgs, DefaultError, Conversation, true>('Conversation', 'POST', `${endpoint}/conversation/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Conversation | undefined), DefaultError, Prisma.ConversationDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Conversation | undefined), DefaultError, Prisma.ConversationDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationDeleteArgs, DefaultError, Conversation, true>('Conversation', 'DELETE', `${endpoint}/conversation/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Conversation, Prisma.ConversationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Conversation', 'DELETE', `${endpoint}/conversation/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateConversation<TArgs extends Prisma.ConversationAggregateArgs, TQueryFnData = Prisma.GetConversationAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ConversationAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ConversationAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Conversation', `${endpoint}/conversation/aggregate`, args, options, fetch);
}

export function useGroupByConversation<TArgs extends Prisma.ConversationGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ConversationGroupByArgs['orderBy'] } : { orderBy?: Prisma.ConversationGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ConversationGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ConversationGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ConversationGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ConversationGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Conversation', `${endpoint}/conversation/groupBy`, args, options, fetch);
}

export function useCountConversation<TArgs extends Prisma.ConversationCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ConversationCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ConversationCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ConversationCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Conversation', `${endpoint}/conversation/count`, args, options, fetch);
}

export function useCheckConversation<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Conversation', `${endpoint}/conversation/check`, args, options, fetch);
}
