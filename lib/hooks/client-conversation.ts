/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ClientConversation } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateClientConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ClientConversation | undefined), DefaultError, Prisma.ClientConversationCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(ClientConversation | undefined), DefaultError, Prisma.ClientConversationCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientConversationCreateArgs, DefaultError, ClientConversation, true>('ClientConversation', 'POST', `${endpoint}/clientConversation/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientConversationCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientConversationCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyClientConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientConversationCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientConversationCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientConversationCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ClientConversation', 'POST', `${endpoint}/clientConversation/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientConversationCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientConversationCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyClientConversation<TArgs extends Prisma.ClientConversationFindManyArgs, TQueryFnData = Array<Prisma.ClientConversationGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientConversationFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientConversationFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientConversation', `${endpoint}/clientConversation/findMany`, args, options, fetch);
}

export function useInfiniteFindManyClientConversation<TArgs extends Prisma.ClientConversationFindManyArgs, TQueryFnData = Array<Prisma.ClientConversationGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientConversationFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientConversationFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ClientConversation', `${endpoint}/clientConversation/findMany`, args, options, fetch);
}

export function useFindUniqueClientConversation<TArgs extends Prisma.ClientConversationFindUniqueArgs, TQueryFnData = Prisma.ClientConversationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientConversationFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientConversationFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientConversation', `${endpoint}/clientConversation/findUnique`, args, options, fetch);
}

export function useFindFirstClientConversation<TArgs extends Prisma.ClientConversationFindFirstArgs, TQueryFnData = Prisma.ClientConversationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientConversationFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientConversationFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientConversation', `${endpoint}/clientConversation/findFirst`, args, options, fetch);
}

export function useUpdateClientConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ClientConversation | undefined), DefaultError, Prisma.ClientConversationUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(ClientConversation | undefined), DefaultError, Prisma.ClientConversationUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientConversationUpdateArgs, DefaultError, ClientConversation, true>('ClientConversation', 'PUT', `${endpoint}/clientConversation/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientConversationUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientConversationUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyClientConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientConversationUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientConversationUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientConversationUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ClientConversation', 'PUT', `${endpoint}/clientConversation/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientConversationUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientConversationUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertClientConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ClientConversation | undefined), DefaultError, Prisma.ClientConversationUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(ClientConversation | undefined), DefaultError, Prisma.ClientConversationUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientConversationUpsertArgs, DefaultError, ClientConversation, true>('ClientConversation', 'POST', `${endpoint}/clientConversation/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientConversationUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientConversationUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteClientConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ClientConversation | undefined), DefaultError, Prisma.ClientConversationDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(ClientConversation | undefined), DefaultError, Prisma.ClientConversationDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientConversationDeleteArgs, DefaultError, ClientConversation, true>('ClientConversation', 'DELETE', `${endpoint}/clientConversation/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientConversationDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientConversationDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ClientConversation, Prisma.ClientConversationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyClientConversation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientConversationDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientConversationDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientConversationDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ClientConversation', 'DELETE', `${endpoint}/clientConversation/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientConversationDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientConversationDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientConversationDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateClientConversation<TArgs extends Prisma.ClientConversationAggregateArgs, TQueryFnData = Prisma.GetClientConversationAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientConversationAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientConversationAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientConversation', `${endpoint}/clientConversation/aggregate`, args, options, fetch);
}

export function useGroupByClientConversation<TArgs extends Prisma.ClientConversationGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ClientConversationGroupByArgs['orderBy'] } : { orderBy?: Prisma.ClientConversationGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ClientConversationGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ClientConversationGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ClientConversationGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ClientConversationGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ClientConversationGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ClientConversationGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientConversation', `${endpoint}/clientConversation/groupBy`, args, options, fetch);
}

export function useCountClientConversation<TArgs extends Prisma.ClientConversationCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ClientConversationCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientConversationCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientConversationCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientConversation', `${endpoint}/clientConversation/count`, args, options, fetch);
}

export function useCheckClientConversation<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { clientId?: string; conversationId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ClientConversation', `${endpoint}/clientConversation/check`, args, options, fetch);
}
