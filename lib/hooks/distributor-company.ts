/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, DistributorCompany } from "../../prisma/generated";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateDistributorCompany(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(DistributorCompany | undefined), DefaultError, Prisma.DistributorCompanyCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(DistributorCompany | undefined), DefaultError, Prisma.DistributorCompanyCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorCompanyCreateArgs, DefaultError, DistributorCompany, true>('DistributorCompany', 'POST', `${endpoint}/distributorCompany/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorCompanyCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorCompanyCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyDistributorCompany(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorCompanyCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorCompanyCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorCompanyCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('DistributorCompany', 'POST', `${endpoint}/distributorCompany/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorCompanyCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorCompanyCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyDistributorCompany<TArgs extends Prisma.DistributorCompanyFindManyArgs, TQueryFnData = Array<Prisma.DistributorCompanyGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DistributorCompany', `${endpoint}/distributorCompany/findMany`, args, options, fetch);
}

export function useInfiniteFindManyDistributorCompany<TArgs extends Prisma.DistributorCompanyFindManyArgs, TQueryFnData = Array<Prisma.DistributorCompanyGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('DistributorCompany', `${endpoint}/distributorCompany/findMany`, args, options, fetch);
}

export function useFindUniqueDistributorCompany<TArgs extends Prisma.DistributorCompanyFindUniqueArgs, TQueryFnData = Prisma.DistributorCompanyGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DistributorCompany', `${endpoint}/distributorCompany/findUnique`, args, options, fetch);
}

export function useFindFirstDistributorCompany<TArgs extends Prisma.DistributorCompanyFindFirstArgs, TQueryFnData = Prisma.DistributorCompanyGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DistributorCompany', `${endpoint}/distributorCompany/findFirst`, args, options, fetch);
}

export function useUpdateDistributorCompany(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(DistributorCompany | undefined), DefaultError, Prisma.DistributorCompanyUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(DistributorCompany | undefined), DefaultError, Prisma.DistributorCompanyUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorCompanyUpdateArgs, DefaultError, DistributorCompany, true>('DistributorCompany', 'PUT', `${endpoint}/distributorCompany/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorCompanyUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorCompanyUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyDistributorCompany(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorCompanyUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorCompanyUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorCompanyUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('DistributorCompany', 'PUT', `${endpoint}/distributorCompany/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorCompanyUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorCompanyUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertDistributorCompany(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(DistributorCompany | undefined), DefaultError, Prisma.DistributorCompanyUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(DistributorCompany | undefined), DefaultError, Prisma.DistributorCompanyUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorCompanyUpsertArgs, DefaultError, DistributorCompany, true>('DistributorCompany', 'POST', `${endpoint}/distributorCompany/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorCompanyUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorCompanyUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteDistributorCompany(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(DistributorCompany | undefined), DefaultError, Prisma.DistributorCompanyDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(DistributorCompany | undefined), DefaultError, Prisma.DistributorCompanyDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorCompanyDeleteArgs, DefaultError, DistributorCompany, true>('DistributorCompany', 'DELETE', `${endpoint}/distributorCompany/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorCompanyDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorCompanyDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DistributorCompany, Prisma.DistributorCompanyGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyDistributorCompany(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorCompanyDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorCompanyDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorCompanyDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('DistributorCompany', 'DELETE', `${endpoint}/distributorCompany/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorCompanyDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorCompanyDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCompanyDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateDistributorCompany<TArgs extends Prisma.DistributorCompanyAggregateArgs, TQueryFnData = Prisma.GetDistributorCompanyAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DistributorCompany', `${endpoint}/distributorCompany/aggregate`, args, options, fetch);
}

export function useGroupByDistributorCompany<TArgs extends Prisma.DistributorCompanyGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DistributorCompanyGroupByArgs['orderBy'] } : { orderBy?: Prisma.DistributorCompanyGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DistributorCompanyGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DistributorCompanyGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DistributorCompanyGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DistributorCompanyGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DistributorCompanyGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DistributorCompanyGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DistributorCompany', `${endpoint}/distributorCompany/groupBy`, args, options, fetch);
}

export function useCountDistributorCompany<TArgs extends Prisma.DistributorCompanyCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DistributorCompanyCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorCompanyCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DistributorCompany', `${endpoint}/distributorCompany/count`, args, options, fetch);
}

export function useCheckDistributorCompany<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { distributorId?: string; companyId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('DistributorCompany', `${endpoint}/distributorCompany/check`, args, options, fetch);
}
