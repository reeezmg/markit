/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Subcategory } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateSubcategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Subcategory | undefined), DefaultError, Prisma.SubcategoryCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Subcategory | undefined), DefaultError, Prisma.SubcategoryCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubcategoryCreateArgs, DefaultError, Subcategory, true>('Subcategory', 'POST', `${endpoint}/subcategory/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubcategoryCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubcategoryCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManySubcategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubcategoryCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubcategoryCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubcategoryCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Subcategory', 'POST', `${endpoint}/subcategory/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubcategoryCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubcategoryCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManySubcategory<TArgs extends Prisma.SubcategoryFindManyArgs, TQueryFnData = Array<Prisma.SubcategoryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubcategoryFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubcategoryFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subcategory', `${endpoint}/subcategory/findMany`, args, options, fetch);
}

export function useInfiniteFindManySubcategory<TArgs extends Prisma.SubcategoryFindManyArgs, TQueryFnData = Array<Prisma.SubcategoryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubcategoryFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubcategoryFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Subcategory', `${endpoint}/subcategory/findMany`, args, options, fetch);
}

export function useFindUniqueSubcategory<TArgs extends Prisma.SubcategoryFindUniqueArgs, TQueryFnData = Prisma.SubcategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubcategoryFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubcategoryFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subcategory', `${endpoint}/subcategory/findUnique`, args, options, fetch);
}

export function useFindFirstSubcategory<TArgs extends Prisma.SubcategoryFindFirstArgs, TQueryFnData = Prisma.SubcategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubcategoryFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubcategoryFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subcategory', `${endpoint}/subcategory/findFirst`, args, options, fetch);
}

export function useUpdateSubcategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Subcategory | undefined), DefaultError, Prisma.SubcategoryUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Subcategory | undefined), DefaultError, Prisma.SubcategoryUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubcategoryUpdateArgs, DefaultError, Subcategory, true>('Subcategory', 'PUT', `${endpoint}/subcategory/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubcategoryUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubcategoryUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManySubcategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubcategoryUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubcategoryUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubcategoryUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Subcategory', 'PUT', `${endpoint}/subcategory/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubcategoryUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubcategoryUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertSubcategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Subcategory | undefined), DefaultError, Prisma.SubcategoryUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Subcategory | undefined), DefaultError, Prisma.SubcategoryUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubcategoryUpsertArgs, DefaultError, Subcategory, true>('Subcategory', 'POST', `${endpoint}/subcategory/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubcategoryUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubcategoryUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteSubcategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Subcategory | undefined), DefaultError, Prisma.SubcategoryDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Subcategory | undefined), DefaultError, Prisma.SubcategoryDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubcategoryDeleteArgs, DefaultError, Subcategory, true>('Subcategory', 'DELETE', `${endpoint}/subcategory/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubcategoryDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubcategoryDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Subcategory, Prisma.SubcategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManySubcategory(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubcategoryDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubcategoryDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubcategoryDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Subcategory', 'DELETE', `${endpoint}/subcategory/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubcategoryDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubcategoryDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubcategoryDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateSubcategory<TArgs extends Prisma.SubcategoryAggregateArgs, TQueryFnData = Prisma.GetSubcategoryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubcategoryAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubcategoryAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subcategory', `${endpoint}/subcategory/aggregate`, args, options, fetch);
}

export function useGroupBySubcategory<TArgs extends Prisma.SubcategoryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SubcategoryGroupByArgs['orderBy'] } : { orderBy?: Prisma.SubcategoryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SubcategoryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SubcategoryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SubcategoryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SubcategoryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SubcategoryGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SubcategoryGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subcategory', `${endpoint}/subcategory/groupBy`, args, options, fetch);
}

export function useCountSubcategory<TArgs extends Prisma.SubcategoryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SubcategoryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubcategoryCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubcategoryCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subcategory', `${endpoint}/subcategory/count`, args, options, fetch);
}

export function useCheckSubcategory<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; description?: string; status?: boolean; image?: string; companyId?: string; categoryId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Subcategory', `${endpoint}/subcategory/check`, args, options, fetch);
}
