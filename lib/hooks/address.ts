/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Address } from "../../prisma/generated/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateAddress(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Address | undefined), DefaultError, Prisma.AddressCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Address | undefined), DefaultError, Prisma.AddressCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddressCreateArgs, DefaultError, Address, true>('Address', 'POST', `${endpoint}/address/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddressCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddressCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddressCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddressCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAddress(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AddressCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AddressCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddressCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Address', 'POST', `${endpoint}/address/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddressCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddressCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AddressCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AddressCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAddress<TArgs extends Prisma.AddressFindManyArgs, TQueryFnData = Array<Prisma.AddressGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.AddressFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.AddressFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Address', `${endpoint}/address/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAddress<TArgs extends Prisma.AddressFindManyArgs, TQueryFnData = Array<Prisma.AddressGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.AddressFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.AddressFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Address', `${endpoint}/address/findMany`, args, options, fetch);
}

export function useFindUniqueAddress<TArgs extends Prisma.AddressFindUniqueArgs, TQueryFnData = Prisma.AddressGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.AddressFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.AddressFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Address', `${endpoint}/address/findUnique`, args, options, fetch);
}

export function useFindFirstAddress<TArgs extends Prisma.AddressFindFirstArgs, TQueryFnData = Prisma.AddressGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.AddressFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.AddressFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Address', `${endpoint}/address/findFirst`, args, options, fetch);
}

export function useUpdateAddress(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Address | undefined), DefaultError, Prisma.AddressUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Address | undefined), DefaultError, Prisma.AddressUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddressUpdateArgs, DefaultError, Address, true>('Address', 'PUT', `${endpoint}/address/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddressUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddressUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddressUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddressUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAddress(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AddressUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AddressUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddressUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Address', 'PUT', `${endpoint}/address/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddressUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddressUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AddressUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AddressUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAddress(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Address | undefined), DefaultError, Prisma.AddressUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Address | undefined), DefaultError, Prisma.AddressUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddressUpsertArgs, DefaultError, Address, true>('Address', 'POST', `${endpoint}/address/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddressUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddressUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddressUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddressUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAddress(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Address | undefined), DefaultError, Prisma.AddressDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Address | undefined), DefaultError, Prisma.AddressDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddressDeleteArgs, DefaultError, Address, true>('Address', 'DELETE', `${endpoint}/address/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddressDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddressDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddressDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddressDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Address, Prisma.AddressGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAddress(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AddressDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AddressDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddressDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Address', 'DELETE', `${endpoint}/address/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddressDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddressDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AddressDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AddressDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAddress<TArgs extends Prisma.AddressAggregateArgs, TQueryFnData = Prisma.GetAddressAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.AddressAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.AddressAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Address', `${endpoint}/address/aggregate`, args, options, fetch);
}

export function useGroupByAddress<TArgs extends Prisma.AddressGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AddressGroupByArgs['orderBy'] } : { orderBy?: Prisma.AddressGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AddressGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AddressGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AddressGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AddressGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AddressGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AddressGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Address', `${endpoint}/address/groupBy`, args, options, fetch);
}

export function useCountAddress<TArgs extends Prisma.AddressCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AddressCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.AddressCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.AddressCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Address', `${endpoint}/address/count`, args, options, fetch);
}

export function useCheckAddress<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; street?: string; locality?: string; city?: string; state?: string; pincode?: string; active?: boolean; userId?: string; clientId?: string; distributorId?: string; companyId?: string; accountId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Address', `${endpoint}/address/check`, args, options, fetch);
}
