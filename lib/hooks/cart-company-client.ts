/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CartCompanyClient } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateCartCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CartCompanyClient | undefined), DefaultError, Prisma.CartCompanyClientCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(CartCompanyClient | undefined), DefaultError, Prisma.CartCompanyClientCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CartCompanyClientCreateArgs, DefaultError, CartCompanyClient, true>('CartCompanyClient', 'POST', `${endpoint}/cartCompanyClient/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CartCompanyClientCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CartCompanyClientCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCartCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CartCompanyClientCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CartCompanyClientCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CartCompanyClientCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CartCompanyClient', 'POST', `${endpoint}/cartCompanyClient/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CartCompanyClientCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CartCompanyClientCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCartCompanyClient<TArgs extends Prisma.CartCompanyClientFindManyArgs, TQueryFnData = Array<Prisma.CartCompanyClientGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CartCompanyClient', `${endpoint}/cartCompanyClient/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCartCompanyClient<TArgs extends Prisma.CartCompanyClientFindManyArgs, TQueryFnData = Array<Prisma.CartCompanyClientGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CartCompanyClient', `${endpoint}/cartCompanyClient/findMany`, args, options, fetch);
}

export function useFindUniqueCartCompanyClient<TArgs extends Prisma.CartCompanyClientFindUniqueArgs, TQueryFnData = Prisma.CartCompanyClientGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CartCompanyClient', `${endpoint}/cartCompanyClient/findUnique`, args, options, fetch);
}

export function useFindFirstCartCompanyClient<TArgs extends Prisma.CartCompanyClientFindFirstArgs, TQueryFnData = Prisma.CartCompanyClientGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CartCompanyClient', `${endpoint}/cartCompanyClient/findFirst`, args, options, fetch);
}

export function useUpdateCartCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CartCompanyClient | undefined), DefaultError, Prisma.CartCompanyClientUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(CartCompanyClient | undefined), DefaultError, Prisma.CartCompanyClientUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CartCompanyClientUpdateArgs, DefaultError, CartCompanyClient, true>('CartCompanyClient', 'PUT', `${endpoint}/cartCompanyClient/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CartCompanyClientUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CartCompanyClientUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCartCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CartCompanyClientUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CartCompanyClientUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CartCompanyClientUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CartCompanyClient', 'PUT', `${endpoint}/cartCompanyClient/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CartCompanyClientUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CartCompanyClientUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCartCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CartCompanyClient | undefined), DefaultError, Prisma.CartCompanyClientUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(CartCompanyClient | undefined), DefaultError, Prisma.CartCompanyClientUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CartCompanyClientUpsertArgs, DefaultError, CartCompanyClient, true>('CartCompanyClient', 'POST', `${endpoint}/cartCompanyClient/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CartCompanyClientUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CartCompanyClientUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCartCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CartCompanyClient | undefined), DefaultError, Prisma.CartCompanyClientDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(CartCompanyClient | undefined), DefaultError, Prisma.CartCompanyClientDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CartCompanyClientDeleteArgs, DefaultError, CartCompanyClient, true>('CartCompanyClient', 'DELETE', `${endpoint}/cartCompanyClient/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CartCompanyClientDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CartCompanyClientDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CartCompanyClient, Prisma.CartCompanyClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCartCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CartCompanyClientDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CartCompanyClientDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CartCompanyClientDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CartCompanyClient', 'DELETE', `${endpoint}/cartCompanyClient/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CartCompanyClientDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CartCompanyClientDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CartCompanyClientDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCartCompanyClient<TArgs extends Prisma.CartCompanyClientAggregateArgs, TQueryFnData = Prisma.GetCartCompanyClientAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CartCompanyClient', `${endpoint}/cartCompanyClient/aggregate`, args, options, fetch);
}

export function useGroupByCartCompanyClient<TArgs extends Prisma.CartCompanyClientGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CartCompanyClientGroupByArgs['orderBy'] } : { orderBy?: Prisma.CartCompanyClientGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CartCompanyClientGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CartCompanyClientGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CartCompanyClientGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CartCompanyClientGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CartCompanyClientGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CartCompanyClientGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CartCompanyClient', `${endpoint}/cartCompanyClient/groupBy`, args, options, fetch);
}

export function useCountCartCompanyClient<TArgs extends Prisma.CartCompanyClientCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CartCompanyClientCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CartCompanyClientCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CartCompanyClient', `${endpoint}/cartCompanyClient/count`, args, options, fetch);
}

export function useCheckCartCompanyClient<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { clientId?: string; companyId?: string; cartId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CartCompanyClient', `${endpoint}/cartCompanyClient/check`, args, options, fetch);
}
