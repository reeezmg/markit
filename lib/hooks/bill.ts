/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Bill } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateBill(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Bill | undefined), DefaultError, Prisma.BillCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Bill | undefined), DefaultError, Prisma.BillCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BillCreateArgs, DefaultError, Bill, true>('Bill', 'POST', `${endpoint}/bill/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BillCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.BillCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BillCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BillCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyBill(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BillCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BillCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BillCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Bill', 'POST', `${endpoint}/bill/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BillCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BillCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BillCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BillCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyBill<TArgs extends Prisma.BillFindManyArgs, TQueryFnData = Array<Prisma.BillGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BillFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BillFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Bill', `${endpoint}/bill/findMany`, args, options, fetch);
}

export function useInfiniteFindManyBill<TArgs extends Prisma.BillFindManyArgs, TQueryFnData = Array<Prisma.BillGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BillFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BillFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Bill', `${endpoint}/bill/findMany`, args, options, fetch);
}

export function useFindUniqueBill<TArgs extends Prisma.BillFindUniqueArgs, TQueryFnData = Prisma.BillGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BillFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BillFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Bill', `${endpoint}/bill/findUnique`, args, options, fetch);
}

export function useFindFirstBill<TArgs extends Prisma.BillFindFirstArgs, TQueryFnData = Prisma.BillGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BillFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BillFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Bill', `${endpoint}/bill/findFirst`, args, options, fetch);
}

export function useUpdateBill(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Bill | undefined), DefaultError, Prisma.BillUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Bill | undefined), DefaultError, Prisma.BillUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BillUpdateArgs, DefaultError, Bill, true>('Bill', 'PUT', `${endpoint}/bill/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BillUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.BillUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BillUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BillUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyBill(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BillUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BillUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BillUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Bill', 'PUT', `${endpoint}/bill/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BillUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BillUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BillUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BillUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertBill(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Bill | undefined), DefaultError, Prisma.BillUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Bill | undefined), DefaultError, Prisma.BillUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BillUpsertArgs, DefaultError, Bill, true>('Bill', 'POST', `${endpoint}/bill/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BillUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.BillUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BillUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BillUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteBill(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Bill | undefined), DefaultError, Prisma.BillDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Bill | undefined), DefaultError, Prisma.BillDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BillDeleteArgs, DefaultError, Bill, true>('Bill', 'DELETE', `${endpoint}/bill/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BillDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.BillDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BillDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BillDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Bill, Prisma.BillGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyBill(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BillDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BillDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BillDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Bill', 'DELETE', `${endpoint}/bill/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BillDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BillDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BillDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BillDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateBill<TArgs extends Prisma.BillAggregateArgs, TQueryFnData = Prisma.GetBillAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BillAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BillAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Bill', `${endpoint}/bill/aggregate`, args, options, fetch);
}

export function useGroupByBill<TArgs extends Prisma.BillGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.BillGroupByArgs['orderBy'] } : { orderBy?: Prisma.BillGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.BillGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.BillGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.BillGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.BillGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.BillGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.BillGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Bill', `${endpoint}/bill/groupBy`, args, options, fetch);
}

export function useCountBill<TArgs extends Prisma.BillCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.BillCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BillCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BillCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Bill', `${endpoint}/bill/count`, args, options, fetch);
}
import type { PaymentStatus, OrderType, OrderStatus } from '@prisma/client';

<<<<<<< HEAD
export function useCheckBill<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; invoiceNumber?: number; paymentMethod?: string; paymentStatus?: PaymentStatus; transactionId?: string; notes?: string; type?: OrderType; status?: OrderStatus; returnDeadline?: string; companyId?: string; accountId?: string; clientId?: string; addressId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
=======
export function useCheckBill<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; invoiceNumber?: number; paymentMethod?: string; paymentStatus?: PaymentStatus; transactionId?: string; notes?: string; type?: OrderType; status?: OrderStatus; deleted?: boolean; returnDeadline?: string; companyId?: string; accountId?: string; clientId?: string; addressId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
>>>>>>> main
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Bill', `${endpoint}/bill/check`, args, options, fetch);
}
