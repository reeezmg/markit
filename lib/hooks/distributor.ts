/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Distributor } from "../../prisma/generated/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateDistributor(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Distributor | undefined), DefaultError, Prisma.DistributorCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Distributor | undefined), DefaultError, Prisma.DistributorCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorCreateArgs, DefaultError, Distributor, true>('Distributor', 'POST', `${endpoint}/distributor/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyDistributor(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Distributor', 'POST', `${endpoint}/distributor/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyDistributor<TArgs extends Prisma.DistributorFindManyArgs, TQueryFnData = Array<Prisma.DistributorGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Distributor', `${endpoint}/distributor/findMany`, args, options, fetch);
}

export function useInfiniteFindManyDistributor<TArgs extends Prisma.DistributorFindManyArgs, TQueryFnData = Array<Prisma.DistributorGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Distributor', `${endpoint}/distributor/findMany`, args, options, fetch);
}

export function useFindUniqueDistributor<TArgs extends Prisma.DistributorFindUniqueArgs, TQueryFnData = Prisma.DistributorGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Distributor', `${endpoint}/distributor/findUnique`, args, options, fetch);
}

export function useFindFirstDistributor<TArgs extends Prisma.DistributorFindFirstArgs, TQueryFnData = Prisma.DistributorGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Distributor', `${endpoint}/distributor/findFirst`, args, options, fetch);
}

export function useUpdateDistributor(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Distributor | undefined), DefaultError, Prisma.DistributorUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Distributor | undefined), DefaultError, Prisma.DistributorUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorUpdateArgs, DefaultError, Distributor, true>('Distributor', 'PUT', `${endpoint}/distributor/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyDistributor(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Distributor', 'PUT', `${endpoint}/distributor/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertDistributor(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Distributor | undefined), DefaultError, Prisma.DistributorUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Distributor | undefined), DefaultError, Prisma.DistributorUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorUpsertArgs, DefaultError, Distributor, true>('Distributor', 'POST', `${endpoint}/distributor/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteDistributor(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Distributor | undefined), DefaultError, Prisma.DistributorDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Distributor | undefined), DefaultError, Prisma.DistributorDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorDeleteArgs, DefaultError, Distributor, true>('Distributor', 'DELETE', `${endpoint}/distributor/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DistributorDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Distributor, Prisma.DistributorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyDistributor(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DistributorDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DistributorDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Distributor', 'DELETE', `${endpoint}/distributor/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DistributorDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DistributorDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DistributorDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateDistributor<TArgs extends Prisma.DistributorAggregateArgs, TQueryFnData = Prisma.GetDistributorAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Distributor', `${endpoint}/distributor/aggregate`, args, options, fetch);
}

export function useGroupByDistributor<TArgs extends Prisma.DistributorGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DistributorGroupByArgs['orderBy'] } : { orderBy?: Prisma.DistributorGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DistributorGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DistributorGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DistributorGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DistributorGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DistributorGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DistributorGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Distributor', `${endpoint}/distributor/groupBy`, args, options, fetch);
}

export function useCountDistributor<TArgs extends Prisma.DistributorCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DistributorCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.DistributorCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.DistributorCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Distributor', `${endpoint}/distributor/count`, args, options, fetch);
}

export function useCheckDistributor<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; images?: string; status?: boolean; accHolderName?: string; ifsc?: string; accountNo?: string; bankName?: string; gstin?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Distributor', `${endpoint}/distributor/check`, args, options, fetch);
}
