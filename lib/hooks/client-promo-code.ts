/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ClientPromoCode } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateClientPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ClientPromoCode | undefined), DefaultError, Prisma.ClientPromoCodeCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(ClientPromoCode | undefined), DefaultError, Prisma.ClientPromoCodeCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientPromoCodeCreateArgs, DefaultError, ClientPromoCode, true>('ClientPromoCode', 'POST', `${endpoint}/clientPromoCode/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientPromoCodeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientPromoCodeCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyClientPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientPromoCodeCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientPromoCodeCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientPromoCodeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ClientPromoCode', 'POST', `${endpoint}/clientPromoCode/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientPromoCodeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientPromoCodeCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyClientPromoCode<TArgs extends Prisma.ClientPromoCodeFindManyArgs, TQueryFnData = Array<Prisma.ClientPromoCodeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientPromoCode', `${endpoint}/clientPromoCode/findMany`, args, options, fetch);
}

export function useInfiniteFindManyClientPromoCode<TArgs extends Prisma.ClientPromoCodeFindManyArgs, TQueryFnData = Array<Prisma.ClientPromoCodeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ClientPromoCode', `${endpoint}/clientPromoCode/findMany`, args, options, fetch);
}

export function useFindUniqueClientPromoCode<TArgs extends Prisma.ClientPromoCodeFindUniqueArgs, TQueryFnData = Prisma.ClientPromoCodeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientPromoCode', `${endpoint}/clientPromoCode/findUnique`, args, options, fetch);
}

export function useFindFirstClientPromoCode<TArgs extends Prisma.ClientPromoCodeFindFirstArgs, TQueryFnData = Prisma.ClientPromoCodeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientPromoCode', `${endpoint}/clientPromoCode/findFirst`, args, options, fetch);
}

export function useUpdateClientPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ClientPromoCode | undefined), DefaultError, Prisma.ClientPromoCodeUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(ClientPromoCode | undefined), DefaultError, Prisma.ClientPromoCodeUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientPromoCodeUpdateArgs, DefaultError, ClientPromoCode, true>('ClientPromoCode', 'PUT', `${endpoint}/clientPromoCode/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientPromoCodeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientPromoCodeUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyClientPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientPromoCodeUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientPromoCodeUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientPromoCodeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ClientPromoCode', 'PUT', `${endpoint}/clientPromoCode/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientPromoCodeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientPromoCodeUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertClientPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ClientPromoCode | undefined), DefaultError, Prisma.ClientPromoCodeUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(ClientPromoCode | undefined), DefaultError, Prisma.ClientPromoCodeUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientPromoCodeUpsertArgs, DefaultError, ClientPromoCode, true>('ClientPromoCode', 'POST', `${endpoint}/clientPromoCode/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientPromoCodeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientPromoCodeUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteClientPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ClientPromoCode | undefined), DefaultError, Prisma.ClientPromoCodeDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(ClientPromoCode | undefined), DefaultError, Prisma.ClientPromoCodeDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientPromoCodeDeleteArgs, DefaultError, ClientPromoCode, true>('ClientPromoCode', 'DELETE', `${endpoint}/clientPromoCode/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientPromoCodeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientPromoCodeDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ClientPromoCode, Prisma.ClientPromoCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyClientPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientPromoCodeDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ClientPromoCodeDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ClientPromoCodeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ClientPromoCode', 'DELETE', `${endpoint}/clientPromoCode/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ClientPromoCodeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ClientPromoCodeDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ClientPromoCodeDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateClientPromoCode<TArgs extends Prisma.ClientPromoCodeAggregateArgs, TQueryFnData = Prisma.GetClientPromoCodeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientPromoCode', `${endpoint}/clientPromoCode/aggregate`, args, options, fetch);
}

export function useGroupByClientPromoCode<TArgs extends Prisma.ClientPromoCodeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ClientPromoCodeGroupByArgs['orderBy'] } : { orderBy?: Prisma.ClientPromoCodeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ClientPromoCodeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ClientPromoCodeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ClientPromoCodeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ClientPromoCodeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ClientPromoCodeGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ClientPromoCodeGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientPromoCode', `${endpoint}/clientPromoCode/groupBy`, args, options, fetch);
}

export function useCountClientPromoCode<TArgs extends Prisma.ClientPromoCodeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ClientPromoCodeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ClientPromoCodeCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ClientPromoCode', `${endpoint}/clientPromoCode/count`, args, options, fetch);
}

export function useCheckClientPromoCode<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; clientId?: string; promoCodeId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ClientPromoCode', `${endpoint}/clientPromoCode/check`, args, options, fetch);
}
