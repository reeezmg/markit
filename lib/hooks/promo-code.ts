/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PromoCode } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreatePromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PromoCode | undefined), DefaultError, Prisma.PromoCodeCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(PromoCode | undefined), DefaultError, Prisma.PromoCodeCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromoCodeCreateArgs, DefaultError, PromoCode, true>('PromoCode', 'POST', `${endpoint}/promoCode/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromoCodeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromoCodeCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PromoCodeCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PromoCodeCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromoCodeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PromoCode', 'POST', `${endpoint}/promoCode/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromoCodeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromoCodeCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPromoCode<TArgs extends Prisma.PromoCodeFindManyArgs, TQueryFnData = Array<Prisma.PromoCodeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PromoCodeFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PromoCodeFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromoCode', `${endpoint}/promoCode/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPromoCode<TArgs extends Prisma.PromoCodeFindManyArgs, TQueryFnData = Array<Prisma.PromoCodeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PromoCodeFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PromoCodeFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PromoCode', `${endpoint}/promoCode/findMany`, args, options, fetch);
}

export function useFindUniquePromoCode<TArgs extends Prisma.PromoCodeFindUniqueArgs, TQueryFnData = Prisma.PromoCodeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PromoCodeFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PromoCodeFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromoCode', `${endpoint}/promoCode/findUnique`, args, options, fetch);
}

export function useFindFirstPromoCode<TArgs extends Prisma.PromoCodeFindFirstArgs, TQueryFnData = Prisma.PromoCodeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PromoCodeFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PromoCodeFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromoCode', `${endpoint}/promoCode/findFirst`, args, options, fetch);
}

export function useUpdatePromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PromoCode | undefined), DefaultError, Prisma.PromoCodeUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(PromoCode | undefined), DefaultError, Prisma.PromoCodeUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromoCodeUpdateArgs, DefaultError, PromoCode, true>('PromoCode', 'PUT', `${endpoint}/promoCode/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromoCodeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromoCodeUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PromoCodeUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PromoCodeUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromoCodeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PromoCode', 'PUT', `${endpoint}/promoCode/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromoCodeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromoCodeUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PromoCode | undefined), DefaultError, Prisma.PromoCodeUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(PromoCode | undefined), DefaultError, Prisma.PromoCodeUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromoCodeUpsertArgs, DefaultError, PromoCode, true>('PromoCode', 'POST', `${endpoint}/promoCode/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromoCodeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromoCodeUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PromoCode | undefined), DefaultError, Prisma.PromoCodeDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(PromoCode | undefined), DefaultError, Prisma.PromoCodeDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromoCodeDeleteArgs, DefaultError, PromoCode, true>('PromoCode', 'DELETE', `${endpoint}/promoCode/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromoCodeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromoCodeDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PromoCode, Prisma.PromoCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPromoCode(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PromoCodeDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PromoCodeDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromoCodeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PromoCode', 'DELETE', `${endpoint}/promoCode/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromoCodeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromoCodeDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PromoCodeDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePromoCode<TArgs extends Prisma.PromoCodeAggregateArgs, TQueryFnData = Prisma.GetPromoCodeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PromoCodeAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PromoCodeAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromoCode', `${endpoint}/promoCode/aggregate`, args, options, fetch);
}

export function useGroupByPromoCode<TArgs extends Prisma.PromoCodeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PromoCodeGroupByArgs['orderBy'] } : { orderBy?: Prisma.PromoCodeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PromoCodeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PromoCodeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PromoCodeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PromoCodeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PromoCodeGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PromoCodeGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromoCode', `${endpoint}/promoCode/groupBy`, args, options, fetch);
}

export function useCountPromoCode<TArgs extends Prisma.PromoCodeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PromoCodeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PromoCodeCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PromoCodeCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromoCode', `${endpoint}/promoCode/count`, args, options, fetch);
}

export function useCheckPromoCode<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; code?: string; discountPercent?: number; isActive?: boolean; companyId?: string; usageLimit?: number; usageCount?: number }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PromoCode', `${endpoint}/promoCode/check`, args, options, fetch);
}
