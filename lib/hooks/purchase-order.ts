/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PurchaseOrder } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreatePurchaseOrder(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PurchaseOrder | undefined), DefaultError, Prisma.PurchaseOrderCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(PurchaseOrder | undefined), DefaultError, Prisma.PurchaseOrderCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PurchaseOrderCreateArgs, DefaultError, PurchaseOrder, true>('PurchaseOrder', 'POST', `${endpoint}/purchaseOrder/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PurchaseOrderCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PurchaseOrderCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPurchaseOrder(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PurchaseOrderCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PurchaseOrderCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PurchaseOrderCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PurchaseOrder', 'POST', `${endpoint}/purchaseOrder/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PurchaseOrderCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PurchaseOrderCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPurchaseOrder<TArgs extends Prisma.PurchaseOrderFindManyArgs, TQueryFnData = Array<Prisma.PurchaseOrderGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PurchaseOrder', `${endpoint}/purchaseOrder/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPurchaseOrder<TArgs extends Prisma.PurchaseOrderFindManyArgs, TQueryFnData = Array<Prisma.PurchaseOrderGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PurchaseOrder', `${endpoint}/purchaseOrder/findMany`, args, options, fetch);
}

export function useFindUniquePurchaseOrder<TArgs extends Prisma.PurchaseOrderFindUniqueArgs, TQueryFnData = Prisma.PurchaseOrderGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PurchaseOrder', `${endpoint}/purchaseOrder/findUnique`, args, options, fetch);
}

export function useFindFirstPurchaseOrder<TArgs extends Prisma.PurchaseOrderFindFirstArgs, TQueryFnData = Prisma.PurchaseOrderGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PurchaseOrder', `${endpoint}/purchaseOrder/findFirst`, args, options, fetch);
}

export function useUpdatePurchaseOrder(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PurchaseOrder | undefined), DefaultError, Prisma.PurchaseOrderUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(PurchaseOrder | undefined), DefaultError, Prisma.PurchaseOrderUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PurchaseOrderUpdateArgs, DefaultError, PurchaseOrder, true>('PurchaseOrder', 'PUT', `${endpoint}/purchaseOrder/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PurchaseOrderUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PurchaseOrderUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPurchaseOrder(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PurchaseOrderUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PurchaseOrderUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PurchaseOrderUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PurchaseOrder', 'PUT', `${endpoint}/purchaseOrder/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PurchaseOrderUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PurchaseOrderUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPurchaseOrder(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PurchaseOrder | undefined), DefaultError, Prisma.PurchaseOrderUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(PurchaseOrder | undefined), DefaultError, Prisma.PurchaseOrderUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PurchaseOrderUpsertArgs, DefaultError, PurchaseOrder, true>('PurchaseOrder', 'POST', `${endpoint}/purchaseOrder/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PurchaseOrderUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PurchaseOrderUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePurchaseOrder(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PurchaseOrder | undefined), DefaultError, Prisma.PurchaseOrderDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(PurchaseOrder | undefined), DefaultError, Prisma.PurchaseOrderDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PurchaseOrderDeleteArgs, DefaultError, PurchaseOrder, true>('PurchaseOrder', 'DELETE', `${endpoint}/purchaseOrder/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PurchaseOrderDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PurchaseOrderDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PurchaseOrder, Prisma.PurchaseOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPurchaseOrder(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PurchaseOrderDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PurchaseOrderDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PurchaseOrderDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PurchaseOrder', 'DELETE', `${endpoint}/purchaseOrder/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PurchaseOrderDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PurchaseOrderDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PurchaseOrderDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePurchaseOrder<TArgs extends Prisma.PurchaseOrderAggregateArgs, TQueryFnData = Prisma.GetPurchaseOrderAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PurchaseOrder', `${endpoint}/purchaseOrder/aggregate`, args, options, fetch);
}

export function useGroupByPurchaseOrder<TArgs extends Prisma.PurchaseOrderGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PurchaseOrderGroupByArgs['orderBy'] } : { orderBy?: Prisma.PurchaseOrderGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PurchaseOrderGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PurchaseOrderGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PurchaseOrderGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PurchaseOrderGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PurchaseOrderGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PurchaseOrderGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PurchaseOrder', `${endpoint}/purchaseOrder/groupBy`, args, options, fetch);
}

export function useCountPurchaseOrder<TArgs extends Prisma.PurchaseOrderCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PurchaseOrderCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PurchaseOrderCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PurchaseOrder', `${endpoint}/purchaseOrder/count`, args, options, fetch);
}
import type { paymentType } from '@prisma/client';

export function useCheckPurchaseOrder<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; companyId?: string; paymentType?: paymentType; distributorId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PurchaseOrder', `${endpoint}/purchaseOrder/check`, args, options, fetch);
}
