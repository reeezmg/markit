/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CompanyClient } from "../../prisma/generated/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CompanyClient | undefined), DefaultError, Prisma.CompanyClientCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(CompanyClient | undefined), DefaultError, Prisma.CompanyClientCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CompanyClientCreateArgs, DefaultError, CompanyClient, true>('CompanyClient', 'POST', `${endpoint}/companyClient/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CompanyClientCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CompanyClientCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CompanyClientCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CompanyClientCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CompanyClientCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CompanyClient', 'POST', `${endpoint}/companyClient/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CompanyClientCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CompanyClientCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCompanyClient<TArgs extends Prisma.CompanyClientFindManyArgs, TQueryFnData = Array<Prisma.CompanyClientGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CompanyClientFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CompanyClientFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CompanyClient', `${endpoint}/companyClient/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCompanyClient<TArgs extends Prisma.CompanyClientFindManyArgs, TQueryFnData = Array<Prisma.CompanyClientGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CompanyClientFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CompanyClientFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CompanyClient', `${endpoint}/companyClient/findMany`, args, options, fetch);
}

export function useFindUniqueCompanyClient<TArgs extends Prisma.CompanyClientFindUniqueArgs, TQueryFnData = Prisma.CompanyClientGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CompanyClientFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CompanyClientFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CompanyClient', `${endpoint}/companyClient/findUnique`, args, options, fetch);
}

export function useFindFirstCompanyClient<TArgs extends Prisma.CompanyClientFindFirstArgs, TQueryFnData = Prisma.CompanyClientGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CompanyClientFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CompanyClientFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CompanyClient', `${endpoint}/companyClient/findFirst`, args, options, fetch);
}

export function useUpdateCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CompanyClient | undefined), DefaultError, Prisma.CompanyClientUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(CompanyClient | undefined), DefaultError, Prisma.CompanyClientUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CompanyClientUpdateArgs, DefaultError, CompanyClient, true>('CompanyClient', 'PUT', `${endpoint}/companyClient/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CompanyClientUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CompanyClientUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CompanyClientUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CompanyClientUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CompanyClientUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CompanyClient', 'PUT', `${endpoint}/companyClient/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CompanyClientUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CompanyClientUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CompanyClient | undefined), DefaultError, Prisma.CompanyClientUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(CompanyClient | undefined), DefaultError, Prisma.CompanyClientUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CompanyClientUpsertArgs, DefaultError, CompanyClient, true>('CompanyClient', 'POST', `${endpoint}/companyClient/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CompanyClientUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CompanyClientUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CompanyClient | undefined), DefaultError, Prisma.CompanyClientDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(CompanyClient | undefined), DefaultError, Prisma.CompanyClientDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CompanyClientDeleteArgs, DefaultError, CompanyClient, true>('CompanyClient', 'DELETE', `${endpoint}/companyClient/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CompanyClientDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CompanyClientDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CompanyClient, Prisma.CompanyClientGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCompanyClient(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CompanyClientDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CompanyClientDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CompanyClientDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CompanyClient', 'DELETE', `${endpoint}/companyClient/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CompanyClientDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CompanyClientDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CompanyClientDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCompanyClient<TArgs extends Prisma.CompanyClientAggregateArgs, TQueryFnData = Prisma.GetCompanyClientAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CompanyClientAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CompanyClientAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CompanyClient', `${endpoint}/companyClient/aggregate`, args, options, fetch);
}

export function useGroupByCompanyClient<TArgs extends Prisma.CompanyClientGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CompanyClientGroupByArgs['orderBy'] } : { orderBy?: Prisma.CompanyClientGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CompanyClientGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CompanyClientGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CompanyClientGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CompanyClientGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CompanyClientGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CompanyClientGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CompanyClient', `${endpoint}/companyClient/groupBy`, args, options, fetch);
}

export function useCountCompanyClient<TArgs extends Prisma.CompanyClientCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CompanyClientCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CompanyClientCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CompanyClientCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CompanyClient', `${endpoint}/companyClient/count`, args, options, fetch);
}

export function useCheckCompanyClient<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { companyId?: string; clientId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CompanyClient', `${endpoint}/companyClient/check`, args, options, fetch);
}
