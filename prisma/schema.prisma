//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  admin
  user
}

enum CompanyType {
  seller
  buyer
}

enum paymentType {
  Credit
  Cash
}

enum PaymentMode {
  CASH
  CARD
  BANK_TRANSFER
  UPI
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  FAILED
}

enum OrderType {
  STANDARD
  BOOKING
  TRY_AT_HOME
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PACKED
  DELIVERED
  CANCELED
  OUTOFSTOCK
  BOOKED
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create', auth() != null && status)
/// @@allow('update', users?[user == auth()])
/// @@allow('read', true)
model Company {
  id                         String               @id() @unique() @default(uuid())
  name                       String
  logo                       String?
  description                String?
  shopifyStoreName           String?              @map("shopify_store_name")
  shopifyAccessToken         String?              @map("shopify_access_token")
  tiktokCipher               String?
  tiktokStoreName            String?
  tiktokAccessToken          String?
  tiktokAccessTokenExpireIn  Int?
  tiktokRefreshToken         String?
  tiktokRefreshTokenExpireIn Int?
  images                     String?
  users                      CompanyUser[]
  clients                    CompanyClient[]
  products                   Product[]
  categories                 Category[]
  subcategories              Subcategory[]
  bills                      Bill[]
  tokenbills                 TokenEntry[]
  accounts                   Account[]
  expenseCategories          ExpenseCategory[]
  expenses                   Expense[]
  payment                    Payment[]
  status                     Boolean              @default(true)
  type                       CompanyType
  pipeline                   Pipeline?
  accHolderName              String?
  sortCode                   String?
  accountNo                  String?
  bankName                   String?
  distributor                DistributorCompany[]
  billCounter                Int                  @default(0) @map("bill_counter")

  @@map("companies")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create', auth() != null && status)
/// @@allow('update', true)
/// @@allow('read', true)
model Distributor {
  id             String               @id() @unique() @default(uuid())
  name           String
  images         String?
  companies      DistributorCompany[]
  purchaseorders PurchaseOrder[]
  status         Boolean              @default(true)
  accHolderName  String?
  ifsc           String?
  accountNo      String?
  bankName       String?
  gstin          String?
  address        Address?

  @@map("distributors")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('all', true)
/// @@allow('read', companies?[company.users?[user == auth()]])
model User {
  id            String             @id() @unique() @default(uuid())
  /// @email
  email         String             @unique()
  name          String?
  password      String
  status        Boolean            @default(true)
  role          UserRole           @default(user) @map("role")
  companies     CompanyUser[]
  address       Address?
  conversations UserConversation[]
  clients       UserClient[]

  @@map("users")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('read, create, update, delete', true)
model Client {
  id                 String               @id() @unique() @default(uuid())
  /// @email
  email              String?              @unique()
  name               String
  password           String?
  phone              String               @unique()
  status             Boolean              @default(true)
  pipelineStatus     String               @default("new")
  companies          CompanyClient[]
  address            Address[]
  bill               Bill?
  conversations      ClientConversation[]
  users              UserClient[]
  newPipeline        Pipeline?            @relation("PipelineNewClients", fields: [newPipelineId], references: [id])
  newPipelineId      String?              @map("newPipeline_id")
  prospectPipeline   Pipeline?            @relation("PipelineProspectClients", fields: [prospectPipelineId], references: [id])
  prospectPipelineId String?              @map("prospectPipeline_id")
  viewingPipeline    Pipeline?            @relation("PipelineViewingClients", fields: [viewingPipelineId], references: [id])
  viewingPipelineId  String?              @map("viewingPipeline_id")
  rejectPipeline     Pipeline?            @relation("PipelineRejectClients", fields: [rejectPipelineId], references: [id])
  rejectPipelineId   String?              @map("rejectPipeline_id")
  closePipeline      Pipeline?            @relation("PipelineCloseClients", fields: [closePipelineId], references: [id])
  closePipelineId    String?              @map("closePipeline_id")

  @@map("clients")
}

/// @@allow('read, update', auth().role == 'admin')
model Pipeline {
  id              String   @id() @unique() @default(uuid())
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       String   @unique() @map("company_id")
  newClients      Client[] @relation("PipelineNewClients")
  prospectClients Client[] @relation("PipelineProspectClients")
  viewingClients  Client[] @relation("PipelineViewingClients")
  rejectClients   Client[] @relation("PipelineRejectClients")
  closeClients    Client[] @relation("PipelineCloseClients")

  @@map("pipelines")
}

/// @@allow('read', true)
/// @@allow('create, update,delete', company.users?[user == auth()])
model Category {
  id            String        @id() @default(uuid())
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt() @map("updated_at")
  /// @length(1, 256)
  name          String
  description   String?
  status        Boolean       @default(true)
  image         String?
  company       Company       @relation(fields: [companyId], references: [id])
  companyId     String        @map("company_id")
  products      Product[]
  subcategories Subcategory[]
  entries       Entry[]
  hsn           String?
  tax           String?

  @@map("categories")
}

/// @@allow('read', true)
/// @@allow('create, update,delete', company.users?[user == auth()])
model Subcategory {
  id          String    @id() @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt() @map("updated_at")
  /// @length(1, 256)
  name        String
  description String?
  status      Boolean   @default(true)
  image       String?
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String    @map("company_id")
  products    Product[]
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?   @map("category_id")
  hsn         String?
  tax         String?

  @@map("subcategories")
}

/// @@allow('read', true)
/// @@allow('read, create, update, delete', company.users?[user == auth()])
model Product {
  id              String        @id() @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt()
  /// @length(1, 256)
  name            String
  /// @length(1, 256)
  brand           String?
  status          Boolean       @default(true)
  rating          Float?
  description     String?
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String        @map("company_id")
  category        Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String?       @map("category_id")
  subcategory     Subcategory?  @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId   String?       @map("subcategory_id")
  variants        Variant[]
  purchaseorder   PurchaseOrder @relation(fields: [purchaseorderId], references: [id], onDelete: Cascade)
  purchaseorderId String        @map("purchaseorder_id")

  @@map("products")
}

/// @@allow('read', true)
/// @@allow('update', true)
/// @@allow('read, create, update, delete', product.company.users?[user == auth()])
model Variant {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  /// @length(1, 256)
  name      String
  /// @length(1, 256)
  code      String?
  status    Boolean  @default(true)
  sprice    Float
  pprice    Float?
  qty       Int?
  discount  Float?
  sizes     Size[]
  images    String[]
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  entries   Entry[]

  @@map("variants")
}

/// @@allow('read', true)
/// @@allow('read, create, update', true)
model Size {
  id        String   @id() @default(uuid())
  barcode   String?  @unique() @db.Text()
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String
  status    String   @default("in_stock")
  entry     Entry?

  @@map("sizes")
}

/// @@allow('read', true)
/// @@allow('read, create, update', true)
model PurchaseOrder {
  id            String       @id() @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt()
  products      Product[]
  distributor   Distributor? @relation(fields: [distributorId], references: [id])
  distributorId String?      @map("distributor_id")
  paymentType   paymentType?

  @@map("purchaseorders")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create, read, update, delete', true)
model Bill {
  id             String       @id() @unique() @default(uuid())
  createdAt      DateTime
  invoiceNumber  Int?
  subtotal       Float?
  discount       Float?
  tax            Float?
  grandTotal     Float?
  deliveryFees   Float?
  paymentMethod  String?
  paymentStatus  String       @default("pending")
  transactionId  String?      @unique()
  notes          String?
  type           OrderType?
  status         OrderStatus?
  bookingDate    DateTime?
  returnDeadline String?
  entries        Entry[]
  company        Company      @relation(fields: [companyId], references: [id])
  companyId      String       @map("company_id")
  account        Account?     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId      String?
  client         Client?      @relation(fields: [clientId], references: [id])
  clientId       String?      @unique()
  address        Address?     @relation(fields: [addressId], references: [id])
  addressId      String?

  @@map("bills")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create, read, update, delete', true)
model TokenEntry {
  id         String   @id() @unique() @default(uuid())
  createdAt  DateTime
  tokenNo    String
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String   @map("company_id")
  itemId     String
  variantId  String
  barcode    String
  categoryId String
  size       String
  name       String
  qty        Int
  rate       Int
  discount   Int
  tax        Int
  value      Int
  sizes      Json
  totalQty   Int

  @@map("token_entries")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create, read, update, delete', true)
model Entry {
  id         String    @id() @unique() @default(uuid())
  name       String?
  barcode    String?
  qty        Float?
  rate       Float?
  discount   Float?
  tax        Float?
  value      Float?
  variant    Variant?  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId  String?
  outOfStock Boolean?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?
  bill       Bill?     @relation(fields: [billId], references: [id], onDelete: Cascade)
  billId     String?
  size       Size?     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  sizeId     String?   @unique()

  @@map("entries")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create, read, update, delete', true)
model Account {
  id        String   @id() @unique() @default(uuid())
  name      String
  phone     String
  bill      Bill[]
  address   Address?
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String   @map("company_id")

  @@map("accounts")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create, read, update, delete', true)
model ExpenseCategory {
  id        String    @id() @unique() @default(uuid())
  /// @length(1, 256)
  name      String
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  expenses  Expense[]
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String    @map("company_id")

  @@map("expense_categories")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create, read, update, delete', true)
model Expense {
  id                String          @id() @unique() @default(uuid())
  expenseDate       DateTime        @default(now())
  /// @length(1, 512)
  note              String?
  currency          String          @default("INR")
  paymentMode       PaymentMode
  status            String          @default("Pending")
  receipt           String?
  receiptName       String?
  taxAmount         Float?
  totalAmount       Float
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt()
  expensecategory   ExpenseCategory @relation(fields: [expensecategoryId], references: [id], onDelete: Cascade)
  expensecategoryId String
  company           Company         @relation(fields: [companyId], references: [id])
  companyId         String          @map("company_id")

  @@map("expenses")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create, read, update, delete', true)
model Payment {
  id               String   @id() @unique() @default(uuid())
  paymentDate      DateTime @default(now())
  paymentMode      String
  paymentReference String?
  amount           Float
  currency         String   @default("INR")
  status           String   @default("Completed")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
  company          Company  @relation(fields: [companyId], references: [id])
  companyId        String   @map("company_id")

  @@map("payments")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create, read, update, delete', true)
model Address {
  id            String       @id() @unique() @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt()
  name          String
  street        String
  locality      String
  city          String
  state         String
  pincode       String
  active        Boolean      @default(true)
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?      @unique() @map("user_id")
  client        Client?      @relation(fields: [clientId], references: [id])
  clientId      String?      @map("client_id")
  distributor   Distributor? @relation(fields: [distributorId], references: [id])
  distributorId String?      @unique() @map("distributor_id")
  account       Account?     @relation(fields: [accountId], references: [id])
  accountId     String?      @unique() @map("account_id")
  bill          Bill[]

  @@map("addresses")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create, read, update, delete', auth() != null)
model Conversation {
  id        String               @id() @unique() @default(uuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt()
  messages  Message[]
  users     UserConversation[]
  clients   ClientConversation[]

  @@map("conversations")
}

/// @@allow('read, update', auth().role == 'admin')
/// @@allow('create, read, update, delete', auth() != null)
model Message {
  id             String       @id() @unique() @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String       @map("sender_id")
  text           String
  seen           String[]
  replyto        String?
  edited         Boolean      @default(false)
  deleted        Boolean      @default(false)

  @@map("messages")
}

/// @@allow('read,create, update, delete', auth() != null)
model CompanyUser {
  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])

  @@id([companyId, userId])
  @@map("companies_users")
}

/// @@allow('read,create, update, delete', true)
model CompanyClient {
  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])
  clientId  String  @map("client_id")
  client    Client  @relation(fields: [clientId], references: [id])

  @@id([companyId, clientId])
  @@map("companies_clients")
}

/// @@allow('read,create, update, delete', auth() != null)
model UserConversation {
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@id([userId, conversationId])
  @@map("users_conversations")
}

/// @@allow('read,create, update, delete', auth() != null)
model ClientConversation {
  clientId       String
  conversationId String
  client         Client       @relation(fields: [clientId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@id([clientId, conversationId])
  @@map("clients_conversations")
}

/// @@allow('read,create, update, delete', auth() != null)
model UserClient {
  clientId String
  userId   String
  client   Client @relation(fields: [clientId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@id([clientId, userId])
  @@map("users_clients")
}

/// @@allow('read,create, update, delete', auth() != null)
model DistributorCompany {
  distributorId String
  companyId     String
  distributor   Distributor @relation(fields: [distributorId], references: [id])
  company       Company     @relation(fields: [companyId], references: [id])

  @@id([distributorId, companyId])
  @@map("distributor_users")
}
