generator client {
     provider      = "prisma-client-js"
  output        = "generated"
  moduleFormat  = "esm"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
   }


datasource db {
    provider = 'postgresql'
    url      = env('DATABASE_URL')
}

plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    target = 'vue'
    output = 'lib/hooks'
}

abstract model Base {
    id String @id @unique @default(uuid())

    @@allow('read, update', auth().role == 'admin')
}

enum UserRole {
    admin
    user
}

enum CompanyType {
    seller
    buyer
}

enum paymentType {
    Credit
    Cash
}

enum PaymentMode {
    CASH
    CARD
    BANK_TRANSFER
    UPI
}

enum PaymentStatus {
    PENDING
    APPROVED
    PAID
    REJECTED
    COMPLETED
    FAILED
}

enum OrderType {
  STANDARD
  BOOKING
  TRY_AT_HOME
  BILL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PACKED
  DELIVERED
  CANCELED
  OUTOFSTOCK
  BOOKED
}

enum TaxType {
  FIXED
  VARIABLE
}

model Company extends Base {
    name        String
    storecode   Int    @unique @default(autoincrement()) 
    storeUniqueName String? @unique @map("store_unique_name")
    logo        String?
    description String?
    shopifyStoreName  String? @map("shopify_store_name")
    shopifyAccessToken String?  @map("shopify_access_token")
    tiktokCipher String? @map("tiktok_cipher")
    tiktokStoreName String? @map("tiktok_store_name")
    tiktokAccessToken String? @map("tiktok_access_token")
    tiktokAccessTokenExpireIn Int? @map("tiktok_access_token_expire_in")
    tiktokRefreshToken String? @map("tiktok_refresh_token")
    tiktokRefreshTokenExpireIn Int? @map("tiktok_refresh_token_expire_in")
    images      String?
    isTaxIncluded Boolean @default(true) @map("is_tax_included")

    users       CompanyUser[]
    clients     CompanyClient[]
    products    Product[]
    categories  Category[]
    subcategories  Subcategory[]
    bills       Bill[]
    tokenbills  TokenEntry[]
    accounts    Account[]
    expenseCategories   ExpenseCategory[]
    expenses        Expense[]
    payment         Payment[]
    variants         Variant[]
    purchaseOrders         PurchaseOrder[]
    items           Item[]
    status      Boolean       @default(true)
    type        CompanyType
    pipeline    Pipeline?

    accHolderName String? @map("acc_holder_name")
    ifsc String?
    accountNo String? @map("account_no")
    bankName String? @map("bank_name")
    gstin String?
    upiId String?   @map("upi_id")
    notifications Notification[]
    address   Address?
    distributor   DistributorCompany[]
    billCounter Int @default(0) @map("bill_counter")
    barcodeCounter Int @default(1) @map("barcode_counter") 
    
    @@allow('create', auth() != null && status)
    @@allow('update', users?[user == auth()])
    @@allow('read', true)

    @@map('companies')
}

model Distributor extends Base {
    name        String
    images      String?
    companies   DistributorCompany[]
    purchaseorders    PurchaseOrder[]
    status      Boolean       @default(true)
    accHolderName String? @map("acc_holder_name")
    ifsc String?
    accountNo String? @map("account_no")
    bankName String? @map("bank_name")
    gstin String?
    address   Address?
    
    @@allow('create', auth() != null && status)
    @@allow('update',true)
    @@allow('read', true)

    @@map('distributors')
}

model User extends Base {
    email     String        @unique @email
    name      String?
    password  String
    status    Boolean       @default(true)
    role      UserRole      @default(user) @map('role')
    companies CompanyUser[]
    address   Address?
    notifications Notification[]
    conversations UserConversation[]
    clients     UserClient[]
    image       String?
    // everybody can signup
    @@allow('create', true)
    @@allow('update', id == auth().id)

    @@allow('read', companies?[company.users?[user == auth()]])

    @@map('users')
}

model Client extends Base {
    email     String?        @unique @email
    name      String
    password  String?
    phone     String        @unique
    status    Boolean       @default(true)
    pipelineStatus    String       @default('new') @map("pipeline_status")
    companies CompanyClient[]
    address   Address[]
    bill      Bill?
    conversations ClientConversation[]
    users     UserClient[]
    newPipeline     Pipeline?        @relation("PipelineNewClients", fields: [newPipelineId], references: [id])
    newPipelineId   String?         @map("new_pipeline_id")
    prospectPipeline     Pipeline?        @relation("PipelineProspectClients", fields: [prospectPipelineId], references: [id])
    prospectPipelineId   String?         @map("prospect_pipeline_id")
    viewingPipeline     Pipeline?        @relation("PipelineViewingClients", fields: [viewingPipelineId], references: [id])
    viewingPipelineId   String?         @map("viewing_pipeline_id")
    rejectPipeline     Pipeline?        @relation("PipelineRejectClients", fields: [rejectPipelineId], references: [id])
    rejectPipelineId   String?         @map("reject_pipeline_id")
    closePipeline     Pipeline?        @relation("PipelineCloseClients", fields: [closePipelineId], references: [id])
    closePipelineId   String?         @map("close_pipeline_id")
    notifications  Notification[]
    
    @@allow('read, create, update, delete', true)

    @@map('clients')
}

model Pipeline extends Base {
    company     Company           @relation(fields: [companyId], references: [id])
    companyId   String            @map('company_id') @unique
    newClients      Client[] @relation("PipelineNewClients")
    prospectClients Client[] @relation("PipelineProspectClients")
    viewingClients  Client[] @relation("PipelineViewingClients")
    rejectClients   Client[] @relation("PipelineRejectClients")
    closeClients    Client[] @relation("PipelineCloseClients")

    @@map("pipelines")
}


model Category {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  name              String          @length(1, 256)
  description       String?
  status            Boolean         @default(true)
  image             String?
  company           Company         @relation(fields: [companyId], references: [id])
  companyId         String          @map("company_id")
  products          Product[]
  subcategories     Subcategory[]
  entries           Entry[]

  hsn               String?
  taxType           TaxType         @default(FIXED)
  fixedTax          Float?          // used if taxType == FIXED
  thresholdAmount   Float?          // used if taxType == VARIABLE
  taxBelowThreshold Float?          // used if taxType == VARIABLE
  taxAboveThreshold Float?          // used if taxType == VARIABLE

  @@allow("read", true)
  @@allow("create, update, delete", company.users?[user == auth()])
  @@map("categories")
}


model Subcategory {
    id          String             @id @default(uuid())
    createdAt   DateTime           @default(now()) @map('created_at')
    updatedAt   DateTime           @updatedAt @map('updated_at')
    name        String             @length(1, 256)
    description String?
    status      Boolean            @default(true)
    image       String?
    company     Company            @relation(fields: [companyId], references: [id])
    companyId   String             @map('company_id')
    products     Product[] 
    category     Category?           @relation(fields: [categoryId], references: [id])
    categoryId   String?             @map('category_id')

    
    @@allow('read', true)
    @@allow('create, update,delete',company.users?[user == auth()])

    @@map('subcategories')
}

model Product {
    id          String            @id @default(uuid())
    createdAt   DateTime          @default(now()) @map("created_at")
    updatedAt   DateTime          @updatedAt @map("updated_at")
    name        String            
    brand       String?           
    status      Boolean           @default(true)
    rating      Float?
    description String?
    company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId   String            @map('company_id')
    category     Category?           @relation(fields: [categoryId], references: [id])
    categoryId   String?            @map('category_id')
    subcategory    Subcategory?           @relation(fields: [subcategoryId], references: [id])
    subcategoryId   String?            @map('subcategory_id')
    variants    Variant[]         
    purchaseorder     PurchaseOrder @relation(fields: [purchaseorderId], references: [id], onDelete: Cascade)
    purchaseorderId   String            @map('purchaseorder_id')

    @@allow('read', true)
    @@allow('read, create, update, delete', company.users?[user == auth()])

    @@map('products')
}

model Variant {
    id          String            @id @default(uuid())
    createdAt   DateTime          @default(now()) @map("created_at")
    updatedAt   DateTime          @updatedAt @map("updated_at")
    name        String            @length(1, 256)
    code        String?            @length(1, 256)
    status      Boolean           @default(true)
    sprice      Float @map("s_price")
    pprice      Float? @map("p_price")
    qty         Int?
    discount    Float?
    dprice Float? @map("d_price")
    sizes       Json?
    images      String[]
    tax         Float       @default(0.0)
    product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String @map("product_id")
    items       Item[]  
    entries     Entry[]
    company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId   String            @map('company_id')
    VariantSizeBarcode VariantSizeBarcode[]

    @@allow('read', true)
    @@allow('update', true)
    @@allow('read, create, update, delete', product.company.users?[user == auth()])
    
    @@map('variants')
}

model Item {
    id          String  @id @default(uuid())
    barcode     String?  @db.Text
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    variant     Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
    variantId   String @map("variant_id")
    status      String @default("in_stock")
    size        String?
    entry        Entry?
    company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId   String @map("company_id")
    
    @@allow('read', true)
    @@allow('read, create, update', true)
    
    @@map("items")
}

model PurchaseOrder {
    id              String        @id @default(uuid())
    createdAt       DateTime      @default(now()) @map("created_at")
    updatedAt       DateTime      @updatedAt @map("updated_at")
    products        Product[]
    distributor     Distributor?  @relation(fields: [distributorId], references: [id])
    distributorId   String?       @map("distributor_id")
    paymentType     paymentType? @map("payment_type")

    company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId   String @map("company_id")

    @@allow('read', true)
    @@allow('read, create, update', true)
    
    @@map("purchase_orders")
}

model Bill extends Base {
    createdAt       DateTime @map("created_at")
    invoiceNumber   Int? @map("invoice_number")  
    subtotal        Float?    
    discount        Float?    
    tax             Float?    
    grandTotal      Float? @map("grand_total")  
    deliveryFees    Float? @map("delivery_fees")  
    paymentMethod   String? @map("payment_method") 
    paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")  
    transactionId   String? @unique @map("transaction_id")  
    notes           String?
    type           OrderType?
    status         OrderStatus? 
    deleted         Boolean? @default(false) 
    bookingDate    DateTime? @map("booking_date")
    returnDeadline String? @map("return_deadline")
    entries         Entry[]       
    company         Company @relation(fields: [companyId], references: [id])
    companyId       String @map("company_id")   
    account         Account? @relation(fields: [accountId], references: [id])
    accountId       String? @map("account_id")   
    client          Client? @relation(fields: [clientId], references: [id])   
    clientId        String? @unique @map("client_id") 
    address         Address? @relation(fields: [addressId], references: [id])   
    addressId       String? @map("address_id")  

    @@allow("create, read, update, delete", true)
    @@map("bills")

}

model TokenEntry extends Base {
    createdAt       DateTime @map("created_at")
    tokenNo         String @map("token_no")
    company         Company @relation(fields: [companyId], references: [id])
    companyId       String @map("company_id")   
    itemId          String @map("item_id")
    variantId       String @map("variant_id")
    barcode         String
    categoryId      String @map("category_id")
    size            String
    name            String
    qty             Int
    rate            Int
    discount        Int
    tax             Int
    value           Int
    sizes           Json
    totalQty        Int @map("total_qty")
           
    @@allow("create, read, update, delete", true)
    @@map("token_entries")
}

model Entry extends Base {
    name        String?
    barcode     String?    
    qty         Float?
    rate        Float?
    discount    Float?
    tax         Float? 
    value       Float?
    size        String?
    variant     Variant? @relation(fields: [variantId], references: [id])
    variantId    String? @map("variant_id") 
    outOfStock  Boolean? @map("out_of_stock")
    category     Category? @relation(fields: [categoryId], references: [id])
    categoryId   String? @map("category_id")
    bill         Bill? @relation(fields: [billId], references: [id], onDelete: Cascade)
    billId       String? @map("bill_id")
    item         Item? @relation(fields: [itemId], references: [id])
    itemId       String? @map("item_id") @unique

    @@allow("create, read, update, delete", true)
    @@map("entries")
}

model Account extends Base {
    name        String
    phone       String
    bill        Bill[]    
    address     Address?
    company     Company @relation(fields: [companyId], references: [id])
    companyId   String @map("company_id") 
    
    @@allow("create, read, update, delete", true)
    @@map("accounts")
}

model ExpenseCategory extends Base {
    name        String @length(1, 256)
    status      Boolean @default(true)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    expenses    Expense[]  
    company     Company @relation(fields: [companyId], references: [id])
    companyId   String @map("company_id")   

    @@allow("create, read, update, delete", true)
    @@map("expense_categories")
}

model Expense extends Base {
    expenseDate     DateTime @default(now()) @map("expense_date")
    note            String? @length(1, 512)
    currency        String @default("INR")
    paymentMode     PaymentMode @map("payment_mode")    
    status          String @default("Pending")
    receipt         String?     
    receiptName     String? @map("receipt_name")
    taxAmount       Float? @map("tax_amount")
    totalAmount     Float @map("total_amount")
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt @map("updated_at")
    expensecategory ExpenseCategory @relation(fields: [expensecategoryId], references: [id])
    expensecategoryId String @map("expense_category_id")
    company         Company @relation(fields: [companyId], references: [id])
    companyId       String @map("company_id")   

    @@allow("create, read, update, delete", true)
    @@map("expenses")

    
}

model Payment extends Base {
    paymentDate      DateTime @default(now()) @map("payment_date")
    paymentMode      String @map("payment_mode")
    paymentReference String? @map("payment_reference")
    amount           Float
    currency         String @default("INR")
    status           String @default("Completed")
    createdAt        DateTime @default(now()) @map("created_at")
    updatedAt        DateTime @updatedAt @map("updated_at")
    company         Company @relation(fields: [companyId], references: [id])
    companyId       String @map("company_id")   

    @@allow("create, read, update, delete", true)
    @@map("payments")
}

model Address extends Base {
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    name       String?
    street    String
    locality  String
    city    String 
    state    String 
    pincode  String
    active  Boolean @default(true)
    user      User? @relation(fields: [userId], references: [id])
    userId    String? @map('user_id') @unique
    client     Client? @relation(fields: [clientId], references: [id])
    clientId    String? @map('client_id')
    distributor Distributor? @relation(fields: [distributorId], references: [id])
    distributorId String? @map('distributor_id') @unique
    company Company? @relation(fields: [companyId], references: [id])
    companyId String? @map('company_id') @unique
    account     Account? @relation(fields: [accountId], references: [id])
    accountId    String? @map('account_id') @unique
    bill     Bill[]

    @@allow('create, read, update, delete', true)
    @@map('addresses')
}

model Conversation extends Base {
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt @map("updated_at")
    messages        Message[]
    users           UserConversation[]
    clients         ClientConversation[]

    @@allow('create, read, update, delete', auth() != null)
    @@map('conversations')
}

model Message extends Base {
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt @map("updated_at")
    conversationId  String @map('conversation_id')
    conversation    Conversation @relation(fields: [conversationId], references: [id])
    senderId        String @map('sender_id')
    text            String
    seen            String[]
    replyto         String? @map("reply_to")
    edited          Boolean @default(false)
    deleted         Boolean @default(false)

    @@allow('create, read, update, delete', auth() != null)
    @@map('messages')
}

model CompanyUser {
    companyId String @map('company_id')
    company   Company @relation(fields: [companyId], references: [id])
    userId    String @map('user_id')
    user      User @relation(fields: [userId], references: [id])

    @@id([companyId, userId])
    @@allow('read,create, update, delete', auth() != null )
    @@map('company_users')
}

model CompanyClient {
    companyId String @map('company_id')
    company   Company @relation(fields: [companyId], references: [id])
    clientId  String @map('client_id')
    client    Client @relation(fields: [clientId], references: [id])

    @@id([companyId, clientId])
    @@allow('read,create, update, delete', true)
    @@map('company_clients')
}

model UserConversation {
    userId         String @map("user_id")
    conversationId String @map("conversation_id")
    user           User @relation(fields: [userId], references: [id])
    conversation   Conversation @relation(fields: [conversationId], references: [id])

    @@id([userId, conversationId])
    @@allow('read,create, update, delete', auth() != null )
    @@map('user_conversations')
}

model ClientConversation {
    clientId       String @map("client_id")
    conversationId String @map("conversation_id")
    client         Client @relation(fields: [clientId], references: [id])
    conversation   Conversation @relation(fields: [conversationId], references: [id])

    @@id([clientId, conversationId])
    @@allow('read,create, update, delete', auth() != null )
    @@map('client_conversations')
}

model UserClient {
    clientId      String @map("client_id")
    userId        String @map("user_id")
    client        Client @relation(fields: [clientId], references: [id])
    user          User @relation(fields: [userId], references: [id])

    @@id([clientId, userId])
    @@allow('read,create, update, delete', auth() != null )
    @@map('user_clients')
}

model DistributorCompany {
    distributorId String @map("distributor_id")
    companyId     String @map("company_id")
    distributor   Distributor @relation(fields: [distributorId], references: [id])
    company       Company @relation(fields: [companyId], references: [id])

    @@id([distributorId, companyId])
    @@allow('read,create, update, delete', auth() != null )
    @@map('distributor_companies')
}

model VariantSizeBarcode {
    id         Int @id @default(autoincrement())
    variantId  String @map("variant_id")
    size       String?
    barcode    String @unique
    variant    Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

    @@unique([variantId, size])
    @@allow('read', true)
    @@allow('read, create, update', true)
    @@map("variant_size_barcodes")
}

model EmailOtp extends Base {

  email      String @unique @email
  otp        String
  expiresAt  DateTime

  @@index([email]) 
  @@allow('read, create, update,delete', true)
  @@map("email_otp")

}


// schema.zmodel

model Notification {
  id String @id @default(cuid())
  company Company @relation(fields: [companyId], references: [id])
  companyId String
  user      User? @relation(fields: [userId], references: [id])
  userId    String? @map('user_id') 
  clientId       String? @map("client_id")
  client         Client? @relation(fields: [clientId], references: [id])
  type NotificationType
  title String
  message String
  read Boolean @default(false)
  actionPath String? // e.g., "/orders/123"
  metadata Json? // Additional structured data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
    @@allow('read, create, update,delete', true)
  @@map("notifications")
}

enum NotificationType {
  ORDER_RECEIVED
  BILL_CREATED
  PAYMENT_RECEIVED
  EXPENSE_CREATED
  INVENTORY_LOW
  SHIPMENT_SENT
  SYSTEM_ALERT
}