import { prisma } from '~/server/prisma';

export default eventHandler(async (event) => {
    const body = await readBody(event);
     const session = await useAuthSession(event)
     console.log(session.data.companyId)
    const { purchaseOrderId } = body;

    if (!purchaseOrderId) {
        throw createError({ statusCode: 400, message: "Purchase Order ID is required" });
    }

    try {
        // Fetch purchase order and variants
        const purchaseOrder = await prisma.purchaseOrder.findUnique({
            where: { id: purchaseOrderId },
            include: {
                products: { include: { variants: true } },
            },
        });


        if (!purchaseOrder) {
            throw createError({ statusCode: 404, message: "Purchase Order not found" });
        }

        let newItems = [];

        for (const product of purchaseOrder.products) {
            for (const variant of product.variants) {
                if (!variant.qty || variant.qty <= 0) continue;

                if (variant.sizes.length > 0) {
                    const sizes = variant.sizes;
                    for (const size of sizes) {
                        for (let i = 0; i < size.qty; i++) {
                            newItems.push({ variantId: variant.id, status: "in_stock", size: size.size });
                        }
                    }
                } else {
                    for (let i = 0; i < variant.qty; i++) {
                        newItems.push({ variantId: variant.id, status: "in_stock", size: null });
                    }
                }
            }
        }
console.log(newItems, "newItems")
        // Insert items (barcode auto-generated by DB)
        const companyId = session.data.companyId;

        newItems = newItems.map(item => ({
          ...item,
          companyId,
        }));
        
        const res = await prisma.item.createMany({ data: newItems });

        const createdItems = await prisma.item.findMany({
            where: {
                variantId: { in: newItems.map(item => item.variantId) },
            },
            orderBy: { createdAt: 'desc' }, 
            include:
            {variant:{
                include:{
                    product:{
                        select:{
                            name:true
                        }
                    }
                }
            }}
        });

        return { items:createdItems};
    } catch (error) {
        console.error("Error generating items:", error);
        throw createError({ statusCode: 500, message: "Failed to generate items" });
    }
});
